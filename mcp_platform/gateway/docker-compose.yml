# Production-ready Docker Compose setup for MCP Platform Gateway
# Includes PostgreSQL database, Redis cache, and Nginx reverse proxy for on-premise VPS deployment

version: "3.8"

services:
  # PostgreSQL Database for production use
  postgres:
    image: postgres:17-alpine
    container_name: mcp_gateway_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp_gateway}
      POSTGRES_USER: ${POSTGRES_USER:-mcpuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Please set POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - mcp_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-mcpuser} -d ${POSTGRES_DB:-mcp_gateway}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:8-alpine
    container_name: mcp_gateway_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:?Please set REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # MCP Platform Gateway
  mcp_gateway:
    build:
      context: ../../ # Build from project root
      dockerfile: mcp_platform/gateway/Dockerfile
    container_name: mcp_gateway_app
    restart: unless-stopped
    environment:
      # Database configuration
      GATEWAY_DATABASE_URL: postgresql://${POSTGRES_USER:-mcpuser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mcp_gateway}

      # Gateway configuration
      GATEWAY_HOST: 0.0.0.0
      GATEWAY_PORT: 8080
      GATEWAY_SECRET_KEY: ${GATEWAY_SECRET_KEY:?Please set GATEWAY_SECRET_KEY}
      GATEWAY_LOG_LEVEL: ${GATEWAY_LOG_LEVEL:-INFO}
      GATEWAY_WORKERS: ${GATEWAY_WORKERS:-2}

      # Admin user configuration
      GATEWAY_ADMIN_PASSWORD: ${GATEWAY_ADMIN_PASSWORD:?Please set GATEWAY_ADMIN_PASSWORD}

      # CORS configuration
      GATEWAY_CORS_ORIGINS: ${GATEWAY_CORS_ORIGINS:-*}

      # Registry configuration
      GATEWAY_REGISTRY_FILE: /app/registry/registry.json

      # Redis configuration (for caching if needed)
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - gateway_data:/app/data
      - gateway_registry:/app/registry
      - gateway_logs:/app/logs
    networks:
      - mcp_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/gateway/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy for SSL termination and load balancing
  nginx:
    image: nginx:alpine
    container_name: mcp_gateway_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mcp_network
    depends_on:
      - mcp_gateway
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp_gateway_prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mcp_network
    ports:
      - "9090:9090"

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mcp_gateway_grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - mcp_network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

networks:
  mcp_network:
    driver: bridge
    name: mcp_gateway_network

volumes:
  postgres_data:
    name: mcp_gateway_postgres_data
  redis_data:
    name: mcp_gateway_redis_data
  gateway_data:
    name: mcp_gateway_app_data
  gateway_registry:
    name: mcp_gateway_registry
  gateway_logs:
    name: mcp_gateway_logs
  nginx_logs:
    name: mcp_gateway_nginx_logs
  prometheus_data:
    name: mcp_gateway_prometheus_data
  grafana_data:
    name: mcp_gateway_grafana_data
