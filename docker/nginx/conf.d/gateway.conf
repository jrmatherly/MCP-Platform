# MCP Gateway server configuration with domain support
# Handles HTTP and HTTPS traffic with SSL termination and Let's Encrypt support

# HTTP server - handles redirects and ACME challenges
server {
    listen 80;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};
    
    # Allow Let's Encrypt ACME challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri $uri/ =404;
    }
    
    # Health check endpoint (no redirect)
    location /health {
        proxy_pass http://mcp_gateway_backend/gateway/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }
    
    # Gateway health endpoint (no redirect)
    location /gateway/health {
        proxy_pass http://mcp_gateway_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server with enhanced security
server {
    listen 443 ssl http2;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};
    
    # SSL configuration with fallback
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    
    # Fallback to default certificates if domain certificates don't exist
    error_page 495 496 497 @ssl_fallback;
    location @ssl_fallback {
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        return 301 https://$server_name$request_uri;
    }
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Client body size limit
    client_max_body_size 10M;
    
    # Authentication endpoints with strict rate limiting
    location /auth/ {
        limit_req zone=login burst=20 nodelay;
        proxy_pass http://mcp_gateway_backend;
        include /etc/nginx/proxy_params;
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }
    
    # Gateway authentication endpoints
    location /gateway/auth/ {
        limit_req zone=login burst=20 nodelay;
        proxy_pass http://mcp_gateway_backend;
        include /etc/nginx/proxy_params;
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }
    
    # API endpoints with rate limiting
    location ~ ^/(mcp|gateway)/ {
        limit_req zone=api burst=50 nodelay;
        proxy_pass http://mcp_gateway_backend;
        include /etc/nginx/proxy_params;
        proxy_read_timeout 120s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Health check endpoints (no rate limiting)
    location /health {
        proxy_pass http://mcp_gateway_backend/gateway/health;
        include /etc/nginx/proxy_params;
        access_log off;
    }
    
    location /gateway/health {
        proxy_pass http://mcp_gateway_backend;
        include /etc/nginx/proxy_params;
        access_log off;
    }
    
    # Static files with caching
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Root endpoint
    location / {
        proxy_pass http://mcp_gateway_backend;
        include /etc/nginx/proxy_params;
    }
}