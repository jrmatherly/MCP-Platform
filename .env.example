# MCP Platform Environment Configuration
# Copy this file to .env and configure your values

# =============================================================================
# REQUIRED SETTINGS - Must be set for production deployment
# =============================================================================

# Database Configuration (PostgreSQL for production)
POSTGRES_DB=mcp_gateway
POSTGRES_USER=mcpuser
POSTGRES_PASSWORD=your_secure_postgres_password_here

# Redis Configuration  
REDIS_PASSWORD=your_secure_redis_password_here

# Gateway Security Configuration
GATEWAY_SECRET_KEY=your_very_long_and_secure_jwt_secret_key_here_at_least_32_chars
GATEWAY_ADMIN_PASSWORD=your_secure_admin_password_here

# Domain Configuration
DOMAIN_NAME=gateway.yourdomain.com

# =============================================================================
# CORE PLATFORM SETTINGS
# =============================================================================

# MCP Platform Configuration
MCP_BACKEND_TYPE=docker
MCP_NETWORK=mcp_platform_network

# Network Configuration
# MCP_SUBNET defines the network range for Docker containers
# Using 10.100.0.0/16 range to avoid conflicts with common corporate networks
# - Avoids 172.16-31.x.x which may conflict with Docker's default bridge networks
# - Uses 10.100+ range which is less commonly used than 10.0/10.1 in enterprises
# - Docker backend will automatically select available /24 subnets within this range
MCP_SUBNET=10.100.0.0/16

# Global Logging Configuration
# This applies to all services unless service-specific log levels are set
# Valid values: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Network Configuration
# External ports for Nginx reverse proxy
# Use standard ports for production (80/443) or custom ports for development
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

# =============================================================================
# GATEWAY SETTINGS  
# =============================================================================

# Gateway Application Configuration
# Internal gateway service configuration (behind reverse proxy)
GATEWAY_HOST=0.0.0.0
GATEWAY_PORT=8080
GATEWAY_WORKERS=2

# CORS Configuration (comma-separated origins)
# For production, specify your allowed origins instead of *
GATEWAY_CORS_ORIGINS=*

# Load Balancer Configuration
GATEWAY_UPSTREAM=mcp-gateway:8080

# Registry Configuration
GATEWAY_REGISTRY_FILE=/app/registry/registry.json

# =============================================================================
# MONITORING SETTINGS
# =============================================================================

# Prometheus Configuration
PROMETHEUS_PORT=9090

# Grafana Configuration
GRAFANA_PORT=3000
GRAFANA_ADMIN_PASSWORD=admin
GRAFANA_PLUGINS=

# =============================================================================
# TEMPLATE SERVICE SETTINGS
# =============================================================================

# Demo Template Configuration
DEMO_PORT=7071
DEMO_HELLO_FROM=Docker Compose Production

# Filesystem Template Configuration
FILESYSTEM_ALLOWED_DIRS=/data
FILESYSTEM_HOST_DIR=./data

# =============================================================================
# SYSTEM SETTINGS
# =============================================================================

# Timezone
TZ=UTC

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Uncomment these for development/testing
# POSTGRES_PASSWORD=devpassword123
# REDIS_PASSWORD=devredis123
# GATEWAY_SECRET_KEY=dev_secret_key_at_least_32_characters_long_for_jwt_signing
# GATEWAY_ADMIN_PASSWORD=admin123
# DOMAIN_NAME=localhost
# LOG_LEVEL=DEBUG

# Service-specific overrides (uncomment if needed)
# GATEWAY_LOG_LEVEL=DEBUG
# MCP_LOG_LEVEL=DEBUG

# Development SQLite (instead of PostgreSQL)
# GATEWAY_DATABASE_URL=sqlite:///data/gateway.db

# =============================================================================
# PRODUCTION OPTIMIZATION SETTINGS  
# =============================================================================

# Database Performance Tuning (PostgreSQL)
# POSTGRES_MAX_CONNECTIONS=100
# POSTGRES_SHARED_BUFFERS=256MB
# POSTGRES_EFFECTIVE_CACHE_SIZE=1GB

# Redis Performance Tuning
# REDIS_MAXMEMORY=512mb
# REDIS_MAXMEMORY_POLICY=allkeys-lru

# Gateway Performance Tuning
# GATEWAY_WORKERS=4
# GATEWAY_TIMEOUT=300

# Resource Management (Docker Compose)
# See docker-compose.yml for CPU/memory limits configuration

# =============================================================================
# SSL/TLS SETTINGS
# =============================================================================

# Certificate Management Mode
# Options: manual (use provided certificates), letsencrypt (automatic), auto (detect)
SSL_CERTIFICATE_MODE=manual

# Manual Certificate Configuration (when SSL_CERTIFICATE_MODE=manual)
SSL_CERT_PATH=/etc/nginx/ssl/fullchain.pem
SSL_KEY_PATH=/etc/nginx/ssl/privkey.pem

# Let's Encrypt Configuration (when SSL_CERTIFICATE_MODE=letsencrypt)
LETSENCRYPT_EMAIL=your-email@domain.com
LETSENCRYPT_DOMAINS=gateway.yourdomain.com
LETSENCRYPT_STAGING=false

# Certificate Monitoring
CERT_EXPIRY_WARNING_DAYS=30

# =============================================================================
# BACKUP AND DISASTER RECOVERY
# =============================================================================

# Backup Configuration
# BACKUP_RETENTION_DAYS=30
# BACKUP_S3_BUCKET=your-backup-bucket
# AWS_ACCESS_KEY_ID=your_aws_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret

# Database Backup Settings
# DB_BACKUP_SCHEDULE=0 2 * * *
# DB_BACKUP_KEEP_DAYS=7

# =============================================================================
# SECURITY HARDENING
# =============================================================================

# Network Security
# ALLOWED_HOSTS=gateway.yourdomain.com,localhost
# TRUSTED_PROXIES=172.20.0.0/16

# Rate Limiting
# RATE_LIMIT_PER_MINUTE=1000
# RATE_LIMIT_BURST=100

# Session Configuration  
# SESSION_TIMEOUT=3600
# SESSION_SECURE_COOKIES=true


# =============================================================================
# SECURITY REMINDERS
# =============================================================================

# 1. Never commit this file with real passwords to version control
# 2. Use strong, unique passwords for all services (minimum 16 characters)
# 3. Set restrictive CORS origins in production (not *)
# 4. Use HTTPS in production with valid SSL certificates
# 5. Regularly rotate secret keys and passwords
# 6. Consider using external secret management (HashiCorp Vault, AWS Secrets Manager)
# 7. Enable firewall rules to restrict access to database ports
# 8. Use strong PostgreSQL user permissions (not superuser)
# 9. Monitor access logs and set up alerts for suspicious activity
# 10. Keep all components updated to latest security patches
# 11. Use container image scanning in CI/CD pipeline
# 12. Implement proper backup and disaster recovery procedures