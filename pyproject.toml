[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "mcp-platform"
dynamic = ["version"]
description = "MCP Platform: Production-ready Model Context Protocol server deployment and management platform"
readme = "README.md"
authors = [{ name = "Sam Arora", email = "tooling@dataeverything.com" }]
license = "Elastic-2.0"
requires-python = ">=3.10"
dependencies = [
    "rich>=13.0.0",
    "pyyaml>=6.0",
    "requests>=2.25.1",
    "cmd2==2.7",
    "aiohttp>=3.8.0",
    "setuptools_scm>=8.3.1",
    "typer>=0.16.0",
    "kubernetes>=33.1.0",
    "fastmcp>=2.10.0",
    "tenacity>=9.1.2",
    "fastapi>=0.116.1",
    "uvicorn>=0.35.0",
    "pydantic>=2.0.0",
    "sqlmodel>=0.0.8",
    "sqlalchemy>=2.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    # Default SQLite support for gateway
    "aiosqlite>=0.21.0",
]
keywords = [
    "MCP",
    "Model Context Protocol",
    "AI Platform",
    "Server Deployment",
    "Docker",
    "Kubernetes",
    "MCP Platform",
    "Unified Gateway",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing framework
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-awesome-pages-plugin>=2.9.0",
    # Code quality tools
    "bandit>=1.7.0",
    "mypy>=1.0.0",
    "ruff>=0.4.0",
    "pre-commit>=3.0.0",
    # Build tools
    "build>=0.10.0",
    "wheel>=0.40.0",
    # Docker
    "docker",
]
# Database drivers for gateway (SQLite included by default)
postgresql = ["asyncpg>=0.29.0"]
mysql = ["aiomysql>=0.2.0"]
oracle = ["cx_Oracle_async>=0.3.0,<=0.3.3"]
mssql = ["aioodbc>=0.4.0"]
# All database drivers
all-databases = [
    "asyncpg>=0.29.0",
    "aiomysql>=0.2.0",
    "cx_Oracle_async>=0.3.0,<=0.3.3",
    "aioodbc>=0.4.0",
]

[project.urls]
Bug-Reports = "https://github.com/jrmatherly/MCP-Platform/issues"
Source = "https://github.com/jrmatherly/MCP-Platform"
Documentation = "https://data-everything.github.io/MCP-Platform"
Issue-Tracker = "https://github.com/jrmatherly/MCP-Platform/issues"

[project.scripts]
mcp-platform = "mcp_platform:main"
mcpp = "mcp_platform:main"

[tool.hatch]
# Hatch configuration for versioning and building

[tool.hatch.version]
source = "vcs"
fallback-version = "0.3.0"

[tool.hatch.build.targets.sdist]
include = [
    "/mcp_platform",
    "/templates",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["mcp_platform"]

# UV-specific configuration
[tool.uv]
# Package sources configuration
package = true

# Development dependencies can be installed with: uv sync --extra dev
# Or for all extras: uv sync --all-extras

[tool.uv.pip]
# Use the same index as pip by default
index-url = "https://pypi.org/simple"

[tool.uv.workspace]
# Exclude directories from workspace discovery
exclude = ["templates_old"]

[tool.uv.sources]
# Use development dependencies from pyproject.toml

# Tool-specific configurations remain the same
# Black configuration replaced by Ruff format

# isort configuration replaced by Ruff lint.isort

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.ruff]
line-length = 90
target-version = "py310"
src = ["mcp_platform"]
fix = true
show-fixes = true
output-format = "grouped"
exclude = [
    # Build and distribution
    "build",
    "dist",
    "*.egg-info",
    "__pycache__",
    ".pytest_cache",

    # Virtual environments
    "venv",
    ".venv",
    "env",
    ".env",

    # Version control and tools
    ".git",
    ".hg",
    ".mypy_cache",
    ".ruff_cache",
    ".tox",

    # Template legacy and node modules
    "templates_old",
    "node_modules",

    # Backend migrations (preserved from original .flake8)
    "backend/*/migrations/*.py",
    "backend/manage.py",
]

[tool.ruff.lint]
# Start with core flake8 rules, can expand later
select = [
    # Core flake8 equivalent rules (matching original behavior)
    "E", # pycodestyle errors
    "W", # pycodestyle warnings  
    "F", # pyflakes

    # Essential additions that are low-noise
    "I",  # isort (replaces standalone isort)
    "B",  # flake8-bugbear (essential bug detection)
    "C4", # flake8-comprehensions (performance)
    "UP", # pyupgrade (modernization)

    # Additional rules can be enabled incrementally:
    # "SIM",  # flake8-simplify 
    # "PIE",  # flake8-pie
    # "PT",   # flake8-pytest-style
    # "RET",  # flake8-return
    # "G",    # flake8-logging-format
    # "T20",  # flake8-print
    # "BLE",  # flake8-blind-except
    # "A",    # flake8-builtins
    # "COM",  # flake8-commas
    # "DTZ",  # flake8-datetimez
    # "EM",   # flake8-errmsg
    # "EXE",  # flake8-executable
    # "ISC",  # flake8-implicit-str-concat
    # "ICN",  # flake8-import-conventions
    # "Q",    # flake8-quotes
    # "RSE",  # flake8-raise
    # "S",    # bandit (security rules)
]

ignore = [
    # Essential ignores migrated from .flake8
    "E203", # whitespace before ':' (Black compatibility)
    "E501", # line too long (handled by Black/Ruff format)
    "F811", # redefined-while-unused
    "F403", # star imports (unavoidable in some contexts)
    "E402", # module-level import not at top
    "W293", # blank line contains whitespace (formatting tool compatibility)  
    "E722", # bare except clauses (allow for backward compatibility)

    # Ruff/Black compatibility
    "B008",   # function call in argument defaults (common pattern)
    "C901",   # complex-structure (disable McCabe complexity for now)
    "COM812", # missing-trailing-comma (formatter handles this)
    "ISC001", # single-line-implicit-string-concatenation (formatter conflict)
]

[tool.ruff.lint.per-file-ignores]
# Initialization files
"__init__.py" = [
    "F401", # unused-import
    "F403", # undefined-local-with-import-star
]

# Migrated from .flake8
"backend/mcp_platform/test_settings.py" = ["F401", "F403"]
"backend/tests/*.py" = ["F401", "F841"]
"backend/*/tests/*.py" = ["F401", "F841"]

# Test-specific ignores
"tests/*.py" = [
    "F401",  # unused-import
    "F811",  # redefined-while-unused  
    "S101",  # assert usage
    "PT011", # pytest-raises-too-broad
    "B018",  # useless-expression (common in tests)
]

# CLI and scripts
"mcp_platform/cli/*.py" = [
    "T201", # print statements allowed in CLI
    "B008", # function-call-in-default-argument (Typer patterns)
]

# Configuration files
"**/settings.py" = [
    "F401", # unused-import
    "F403", # star-import
    "E402", # module-level-import-not-at-top-of-file
]

# Template files
"templates/*/src/*.py" = [
    "T201", # print statements
    "S311", # suspicious-non-cryptographic-random-usage
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.isort]
known-first-party = ["mcp_platform"]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

# Formatting (replaces Black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
# Preserve Black's target-version behavior by matching our target-version
# Black had: target-version = ['py310', 'py311', 'py312']
# Ruff uses target-version at the top level (already set to "py310")

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["-v", "--tb=short", "--strict-markers", "--disable-warnings"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "docker: Tests requiring Docker",
    "kubernetes: Tests requiring Kubernetes",
    "slow: Slow running tests",
    "template: Template-specific tests",
    "e2e: End-to-end tests",
]
timeout = 300

[tool.coverage.run]
source = ["mcp_platform"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "setup.py",
    "conftest.py",
    "*/conftest.py",
    "templates_old/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
skip_covered = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
